const n="/api/v1";class i{baseURL;constructor(e){this.baseURL=e}async request(e,t){const s=await fetch(`${this.baseURL}${e}`,{...t,headers:{"Content-Type":"application/json",...t?.headers}});if(!s.ok){const r=await s.text();throw new Error(`API Error: ${s.statusText} - ${r}`)}return s.json()}async getModels(){return this.request("/models")}async getModel(e){return this.request(`/models/${e}`)}async deleteModel(e){return this.request(`/models/${e}`,{method:"DELETE"})}async uploadModelToHub(e,t){return this.request(`/models/${e}/upload-to-hub`,{method:"POST",body:JSON.stringify(t)})}async generateText(e,t){return this.request(`/models/${e}/generate`,{method:"POST",body:JSON.stringify(t)})}async createTrainingJob(e){return this.request("/training/jobs",{method:"POST",body:JSON.stringify(e)})}async getTrainingJobs(){return this.request("/training/jobs")}async getTrainingJob(e){return this.request(`/training/jobs/${e}`)}async cancelTrainingJob(e){return this.request(`/training/jobs/${e}`,{method:"DELETE"})}async rerunTrainingJob(e){return this.request(`/training/jobs/${e}/rerun`,{method:"POST"})}async getSystemStatus(){return this.request("/system/status")}async getHealth(){return(await fetch(`${this.baseURL.replace("/api/v1","")}/health`)).json()}async getInferenceStatus(){return this.request("/inference/status")}async loadModel(e){return this.request("/inference/load",{method:"POST",body:JSON.stringify({model_path:e.model_path,tensor_parallel_size:e.tensor_parallel_size??1,gpu_memory_utilization:e.gpu_memory_utilization??0,max_model_len:e.max_model_len,dtype:e.dtype||"auto",quantization:e.quantization})})}async unloadModel(){return this.request("/inference/unload",{method:"POST"})}async getRegistryModels(e){const t=e?`/registry/models?category=${e}`:"/registry/models",s=await this.request(t);return{models:s.data,total:s.total,category:e}}async getRegistryModel(e){return(await this.request(`/registry/models/${encodeURIComponent(e)}`)).data}async getRegistryCategories(){return{categories:(await this.request("/registry/categories")).data}}async validateModelForTraining(e,t){return this.request("/registry/validate/training",{method:"POST",body:JSON.stringify({model_id:e,config:t})})}async validateModelForInference(e,t){return this.request("/registry/validate/inference",{method:"POST",body:JSON.stringify({model_id:e,config:t})})}async get(e){return this.request(e)}async post(e,t){return this.request(e,{method:"POST",body:JSON.stringify(t)})}async put(e,t){return this.request(e,{method:"PUT",body:JSON.stringify(t)})}async delete(e){return this.request(e,{method:"DELETE"})}}const a=new i(n);export{a};
