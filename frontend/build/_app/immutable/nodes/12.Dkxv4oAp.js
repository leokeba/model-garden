import"../chunks/DsnmJJEf.js";import{q as _r,p as cr,a as ga,s as se,o as ur,E as ba,i as l,d as R,f as v,h as gr,b as n,c as br,$ as yr,t as Y,e as t,g as a,l as J,w as fr,n as i,r,m as V,j as ve,k as K}from"../chunks/D_fozEd9.js";import{i as u}from"../chunks/C2ngLJft.js";import{r as m,s as ke,a as bt,b as xr,e as yt,i as ft}from"../chunks/489nzvkF.js";import{b as y,c as oe}from"../chunks/aZwOC-1j.js";import{b as X}from"../chunks/DV7skBy0.js";import{g as hr}from"../chunks/3aB9BzSK.js";import{a as ya}from"../chunks/GrWgsx-T.js";import{B as fa,C as kr}from"../chunks/DWJusdRQ.js";var wr=v('<div class="p-4 bg-red-50 border border-red-200 rounded-lg"><p class="text-red-700"> </p></div>'),Sr=(ie,N)=>N.model_type="text",Lr=v('<div class="w-full h-full rounded-full bg-white scale-50"></div>'),Ar=(ie,N)=>N.model_type="vision",Mr=v('<div class="w-full h-full rounded-full bg-white scale-50"></div>'),Br=v("<option>Loading models...</option>"),Cr=v("<option> </option>"),Er=v("<option> </option>"),Rr=v('<p class="text-xs text-yellow-600 mt-1"> </p>'),Tr=v('<p class="text-xs text-gray-500 mt-1">üé® Vision-language models can analyze images and text together</p>'),jr=v('<p class="text-xs text-blue-700"><strong>Context:</strong> </p>'),Nr=v('<div class="space-y-1"><p class="text-xs text-blue-700"><strong>VRAM:</strong> </p> <!></div>'),Or=v('<p class="text-xs text-blue-700 mt-2"><strong>Best for:</strong> </p>'),zr=v('<div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg"><div class="flex items-start justify-between"><div class="flex-1"><h4 class="text-sm font-semibold text-blue-900 mb-1"> </h4> <p class="text-xs text-blue-800 mb-2"> </p> <!> <!></div></div></div>'),Pr=v(`Enter a HuggingFace dataset identifier (e.g.,
                  "username/dataset-name")<br/> For specific files, use: "username/repo::train.jsonl"`,1),qr=v(`<p class="text-sm text-blue-800 mb-2">HuggingFace datasets should use OpenAI messages format with
                    base64 images:</p> <pre class="text-xs bg-blue-100 p-2 rounded overflow-x-auto"><code></code></pre> <p class="text-xs text-blue-700 mt-2"><strong>Example:</strong> <code>Barth371/train_pop_valet_no_wrong_doc</code></p>`,1),Fr=v(`<p class="text-sm text-blue-800 mb-2">Your dataset should be in JSONL format with:</p> <pre class="text-xs bg-blue-100 p-2 rounded overflow-x-auto"><code></code></pre> <p class="text-xs text-blue-700 mt-2"><strong>Tip:</strong> Use <code>model-garden create-vision-dataset</code> CLI to generate
                    sample data</p>`,1),Qr=v('<div class="p-4 bg-blue-50 border border-blue-200 rounded-lg"><h4 class="text-sm font-semibold text-blue-900 mb-2">üìã Vision Dataset Format</h4> <!></div>'),Vr=v('<span class="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">‚úì Using registry defaults</span>'),Ur=v(`<div class="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg"><p class="text-sm text-yellow-800">‚ö†Ô∏è <strong>Vision models require:</strong> Lower batch size (1-2),
                higher gradient accumulation (8+), and lower learning rate (2e-5)</p></div>`),$r=v(`<div class="ml-6 space-y-4 p-4 bg-white border border-gray-200 rounded-lg"><div><label for="early_stopping_patience" class="block text-sm font-medium text-gray-700 mb-1">Patience (evaluations)</label> <input type="number" id="early_stopping_patience" min="1" max="20" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Number of evaluations with no improvement before
                        stopping (3-5 typical)</p></div> <div><label for="early_stopping_threshold" class="block text-sm font-medium text-gray-700 mb-1">Improvement Threshold</label> <input type="number" id="early_stopping_threshold" min="0" step="0.0001" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Minimum change to qualify as improvement (0.0001 =
                        0.01%, smaller = more sensitive)</p></div> <div class="p-3 bg-green-50 border border-green-200 rounded-lg"><p class="text-xs text-green-800"><strong>üí° Example:</strong> With patience=3 and
                        threshold=0.0001, training stops if validation loss
                        doesn't improve by at least 0.01% for 3 consecutive
                        evaluations.</p></div></div>`),Gr=v(`<div class="mb-6"><h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">üìä Evaluation Settings</h4> <div class="grid grid-cols-2 gap-4"><div><label for="eval_strategy" class="block text-sm font-medium text-gray-700 mb-1">Evaluation Strategy</label> <select id="eval_strategy" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Every N steps</option><option>Every epoch</option><option>No evaluation</option></select></div> <div><label for="eval_steps" class="block text-sm font-medium text-gray-700 mb-1">Evaluation Steps</label> <input type="number" id="eval_steps" placeholder="Auto (same as save_steps)" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Evaluate every N steps (leave empty for auto)</p></div> <div><label for="metric_for_best_model" class="block text-sm font-medium text-gray-700 mb-1">Best Model Metric</label> <select id="metric_for_best_model" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Validation Loss (lower is better)</option><option>Accuracy (higher is better)</option><option>F1 Score (higher is better)</option></select></div> <div><div class="flex items-center mt-6"><input type="checkbox" id="load_best_model_at_end" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="load_best_model_at_end" class="ml-2 block text-sm text-gray-700">Load best model at end</label></div> <p class="text-xs text-gray-500 mt-1">Automatically load checkpoint with best validation metric</p></div></div></div> <div class="mb-6"><h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">‚è∏Ô∏è Automatic Early Stopping</h4> <div class="p-4 bg-blue-50 border border-blue-200 rounded-lg mb-4"><p class="text-sm text-blue-800 mb-2"><strong>Automatic Early Stopping:</strong> Stops training when
                  validation loss stops improving, preventing overfitting and saving
                  compute time.</p> <p class="text-xs text-blue-700">This is different from the manual "Stop Early" button on the
                  training page. This monitors validation metrics and stops
                  automatically.</p></div> <div class="space-y-4"><div><div class="flex items-center"><input type="checkbox" id="early_stopping_enabled" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="early_stopping_enabled" class="ml-2 block text-sm font-medium text-gray-700">Enable Automatic Early Stopping</label></div> <p class="text-xs text-gray-500 mt-1 ml-6">Monitor validation loss and stop when it stops improving</p></div> <!></div></div>`,1),Jr=(ie,N)=>R(N,!l(N)),Dr=v('<div class="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg"><h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">‚öôÔ∏è Optimizer Settings</h4> <div class="grid grid-cols-2 gap-4 mb-6"><div><label for="weight_decay" class="block text-sm font-medium text-gray-700 mb-1">Weight Decay</label> <input type="number" id="weight_decay" step="0.001" min="0" max="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">L2 regularization strength (0.01 typical)</p></div> <div><label for="lr_scheduler_type" class="block text-sm font-medium text-gray-700 mb-1">LR Scheduler</label> <select id="lr_scheduler_type" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Linear (default)</option><option>Cosine (good for vision)</option><option>Constant</option><option>Constant with Warmup</option><option>Polynomial</option></select> <p class="text-xs text-gray-500 mt-1">Learning rate schedule type</p></div> <div><label for="warmup_steps" class="block text-sm font-medium text-gray-700 mb-1">Warmup Steps</label> <input type="number" id="warmup_steps" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Steps to warmup learning rate from 0</p></div> <div><label for="max_grad_norm" class="block text-sm font-medium text-gray-700 mb-1">Max Gradient Norm</label> <input type="number" id="max_grad_norm" step="0.1" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Gradient clipping threshold (1.0 standard)</p></div></div> <h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">üéõÔ∏è Adam Optimizer Parameters</h4> <div class="grid grid-cols-3 gap-4 mb-6"><div><label for="adam_beta1" class="block text-sm font-medium text-gray-700 mb-1">Adam Beta1</label> <input type="number" id="adam_beta1" step="0.01" min="0" max="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Exponential decay rate for 1st moment (0.9 default)</p></div> <div><label for="adam_beta2" class="block text-sm font-medium text-gray-700 mb-1">Adam Beta2</label> <input type="number" id="adam_beta2" step="0.001" min="0" max="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Exponential decay rate for 2nd moment (0.999 default)</p></div> <div><label for="adam_epsilon" class="block text-sm font-medium text-gray-700 mb-1">Adam Epsilon</label> <input type="number" id="adam_epsilon" step="1e-9" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Small constant for numerical stability (1e-8 default)</p></div></div> <h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">üîÑ Data Loading Settings</h4> <div class="grid grid-cols-2 gap-4"><div><label for="dataloader_num_workers" class="block text-sm font-medium text-gray-700 mb-1">Dataloader Workers</label> <input type="number" id="dataloader_num_workers" min="0" max="16" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Number of worker processes (0 = main process only)</p></div> <div><div class="flex items-center mt-6"><input type="checkbox" id="dataloader_pin_memory" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="dataloader_pin_memory" class="ml-2 block text-sm text-gray-700">Pin memory to GPU</label></div> <p class="text-xs text-gray-500 mt-1">Faster data transfer to GPU (recommended)</p></div></div></div>'),Hr=v('<span class="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">‚úì Using registry defaults</span>'),Ir=(ie,N)=>R(N,!l(N)),Wr=(ie,N)=>{const e=ie.currentTarget.value.trim();e?N.lora_config.target_modules=e.split(",").map(Z=>Z.trim()).filter(Z=>Z.length>0):N.lora_config.target_modules=null},Kr=v(`<div class="p-4 bg-gray-50 border border-gray-200 rounded-lg"><div class="grid grid-cols-2 gap-4 mb-4"><div><label for="lora_bias" class="block text-sm font-medium text-gray-700 mb-1">LoRA Bias</label> <select id="lora_bias" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>None (default)</option><option>All bias terms</option><option>LoRA layers only</option></select> <p class="text-xs text-gray-500 mt-1">How to handle bias parameters in LoRA layers</p></div> <div><label for="use_gradient_checkpointing" class="block text-sm font-medium text-gray-700 mb-1">Gradient Checkpointing</label> <select id="use_gradient_checkpointing" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Unsloth (recommended)</option><option>Standard PyTorch</option><option>Disabled</option></select> <p class="text-xs text-gray-500 mt-1">Reduces memory at cost of compute time</p></div></div> <div class="grid grid-cols-2 gap-4 mb-4"><div><div class="flex items-center mt-2"><input type="checkbox" id="use_rslora" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="use_rslora" class="ml-2 block text-sm text-gray-700">Use RSLoRA (Rank-Stabilized LoRA)</label></div> <p class="text-xs text-gray-500 mt-1">Better stability for high ranks (r > 16)</p></div> <div><label for="random_state" class="block text-sm font-medium text-gray-700 mb-1">Random Seed</label> <input type="number" id="random_state" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Seed for reproducible results (42 is popular)</p></div></div> <div class="grid grid-cols-2 gap-4 mb-4"><div><label for="task_type" class="block text-sm font-medium text-gray-700 mb-1">Task Type</label> <select id="task_type" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Causal LM (Text Generation)</option><option>Sequence-to-Sequence</option><option>Token Classification</option><option>Sequence Classification</option><option>Question Answering</option></select> <p class="text-xs text-gray-500 mt-1">Type of task for PEFT optimization</p></div> <div><label for="target_modules_input" class="block text-sm font-medium text-gray-700 mb-1">Target Modules (Advanced)</label> <input type="text" id="target_modules_input" placeholder="q_proj, k_proj, v_proj (leave empty for auto)" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Comma-separated list of layers to apply LoRA (auto-detected
                    if empty)</p></div></div> <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg"><h4 class="text-sm font-semibold text-blue-900 mb-2">üí° LoRA Tips</h4> <ul class="text-xs text-blue-800 space-y-1"><li><strong>Rank (r):</strong> Start with 16, increase to 64+ for
                    complex tasks or large datasets</li> <li><strong>Alpha:</strong> Usually equal to rank. Higher alpha =
                    stronger adaptation</li> <li><strong>Dropout:</strong> Add 0.1-0.3 if overfitting, keep 0
                    for small datasets</li> <li><strong>RSLoRA:</strong> Enable for ranks > 16 to improve training
                    stability</li> <li><strong>Target Modules:</strong> Leave empty for auto-detection.
                    Common: "q_proj,k_proj,v_proj,o_proj" for attention layers</li> <li><strong>Task Type:</strong> Use "CAUSAL_LM" for text generation,
                    "SEQ_2_SEQ_LM" for translation/summarization</li></ul></div></div>`),Yr=v(`<strong>‚úÖ Merged 16-bit (Recommended):</strong> Full model with
                  LoRA weights merged using Unsloth. Creates split files for vLLM
                  compatibility.`,1),Xr=v(`<strong>üì¶ Merged 4-bit:</strong> Full model with LoRA weights
                  merged in 4-bit quantized format. Smaller file size.`,1),Zr=v(`<strong>üîß LoRA Adapters Only (Advanced):</strong> Saves only the
                  adapter weights. Requires the base model to load.`,1),es=v(`<strong>Conservative:</strong> Masks JSON structural
                          characters: <code></code> and
                          whitespace. Masks ~31% of tokens. <em>Recommended for most cases.</em>`,1),as=v("<strong>Moderate:</strong> Conservative + masks <code>null</code> keyword. Good when null values are predictable.",1),ts=v(`<strong>Aggressive:</strong> Moderate + masks schema field
                          names. Maximum focus on semantic content. Requires specifying
                          schema keys below.`,1),rs=v(`<div><label for="selective_loss_schema_keys" class="block text-sm font-medium text-gray-700 mb-1">Schema Keys to Mask</label> <input type="text" id="selective_loss_schema_keys" placeholder="Marque,Modele,contents,confidence_score" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Comma-separated list of JSON field names to mask (e.g.,
                        "name,address,phone")</p> <div class="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded"><p class="text-xs text-yellow-800">‚ö†Ô∏è Only mask keys that are predictable and don't carry
                          semantic meaning. The model should still learn what
                          values go with each key.</p></div></div>`),ss=v(`<br/><em>Currently: Masking starts immediately (traditional
                            approach)</em>`,1),os=v("<br/><em> </em>",1),is=v(`<div class="ml-6 space-y-4 p-4 bg-white border border-gray-200 rounded-lg"><div><label for="selective_loss_level" class="block text-sm font-medium text-gray-700 mb-2">Masking Level</label> <select id="selective_loss_level" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Conservative (Structure Only)</option><option>Moderate (Structure + null)</option><option>Aggressive (Structure + null + Schema Keys)</option></select> <div class="mt-2 p-3 bg-gray-50 rounded-lg"><p class="text-xs text-gray-700"><!></p></div></div> <!> <div><label for="selective_loss_masking_start_step" class="block text-sm font-medium text-gray-700 mb-2"> </label> <input type="range" id="selective_loss_masking_start_step" min="0" max="500" step="10" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-primary-500"/> <div class="flex justify-between text-xs text-gray-500 mt-1"><span>0 (Immediate)</span> <span>100</span> <span>200</span> <span>500 steps</span></div> <div class="mt-2 p-3 bg-blue-50 rounded-lg"><p class="text-xs text-blue-700"><strong>üí° Tip:</strong> Setting this to 50-200 lets the
                        model learn JSON structure first before applying
                        selective masking. This can prevent degeneration issues
                        with aggressive masking. <!></p></div></div> <div><div class="flex items-center"><input type="checkbox" id="selective_loss_verbose" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="selective_loss_verbose" class="ml-2 block text-sm text-gray-700">Verbose mode (print masking statistics)</label></div> <p class="text-xs text-gray-500 mt-1">Display detailed token masking stats during training</p></div> <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg"><h4 class="text-sm font-semibold text-blue-900 mb-2">üìä What Gets Masked?</h4> <ul class="text-xs text-blue-800 space-y-1"><li>‚úì Structural: <code></code> and whitespace
                        (spaces, newlines, tabs)</li> <li>‚úì Quotes: <code>"</code> (string delimiters - purely structural)</li> <li>‚úì Null keyword: <code>null</code> (moderate/aggressive only)</li> <li>‚úó NOT masked: <code>true</code>, <code>false</code> (can
                        be semantic)</li> <li>‚úì Schema keys: Field names like <code>name</code> (aggressive
                        only)</li></ul> <p class="text-xs text-blue-700 mt-2"><strong>Example:</strong> In <code></code>, conservative
                      mode masks <code></code> and spaces (~31% of tokens),
                      trains on <code>name John age 30</code></p></div></div>`),ls=v(`<div><h3 class="text-lg font-semibold text-gray-900 mb-4">üéØ Selective Loss (Structured Outputs)</h3> <div class="p-4 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg mb-4"><p class="text-sm text-gray-800 mb-2"><strong>üî¨ Experimental Feature:</strong> Optimize training for structured
                outputs (JSON, forms, etc.)</p> <p class="text-xs text-gray-700">Masks structural tokens (braces, colons, whitespace) so the
                model focuses on semantic content. Useful for form extraction,
                structured data generation, and similar tasks.</p></div> <div class="space-y-4"><div><div class="flex items-center"><input type="checkbox" id="selective_loss" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="selective_loss" class="ml-2 block text-sm font-medium text-gray-700">Enable Selective Loss Masking</label></div> <p class="text-xs text-gray-500 mt-1 ml-6">Automatically mask JSON structural tokens during training</p></div> <!></div></div>`),ns=v(`<form class="space-y-6"><!> <div><h3 class="text-lg font-semibold text-gray-900 mb-4">Basic Configuration</h3> <div class="grid grid-cols-1 gap-4"><div><div class="block text-sm font-medium text-gray-700 mb-2">Model Type *</div> <div class="grid grid-cols-2 gap-3"><button type="button"><div class="flex items-center gap-2"><div><!></div> <span class="font-medium">Text-Only (LLM)</span></div> <p class="text-sm text-gray-600 mt-2 ml-6">Fine-tune language models for text generation tasks</p></button> <button type="button"><div class="flex items-center gap-2"><div><!></div> <span class="font-medium">Vision-Language (VLM)</span></div> <p class="text-sm text-gray-600 mt-2 ml-6">Fine-tune multimodal models for image + text tasks</p></button></div></div> <div><label for="name" class="block text-sm font-medium text-gray-700 mb-1">Model Name *</label> <input type="text" id="name" placeholder="my-finance-model" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500" required/></div> <div><label for="base_model" class="block text-sm font-medium text-gray-700 mb-1">Base Model *</label> <select id="base_model" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500" required><!></select> <!> <!> <!></div> <div><label for="dataset_path" class="block text-sm font-medium text-gray-700 mb-1">Dataset Path *</label> <input type="text" id="dataset_path" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500" required/> <div class="mt-2 flex items-center"><input type="checkbox" id="from_hub" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="from_hub" class="ml-2 block text-sm text-gray-700">Load from HuggingFace Hub</label></div> <p class="text-xs text-gray-500 mt-1"><!></p></div> <div><label for="validation_dataset_path" class="block text-sm font-medium text-gray-700 mb-1">Validation Dataset Path (Optional)</label> <input type="text" id="validation_dataset_path" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <div class="mt-2 flex items-center"><input type="checkbox" id="validation_from_hub" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/> <label for="validation_from_hub" class="ml-2 block text-sm text-gray-700">Load validation dataset from HuggingFace Hub</label></div> <p class="text-xs text-gray-500 mt-1">üìä Optional: Provide a validation dataset to track validation
                loss during training<br/> <!></p></div> <!> <div><label for="output_dir" class="block text-sm font-medium text-gray-700 mb-1">Output Directory</label> <input type="text" id="output_dir" placeholder="./models/my-model" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/></div></div></div> <div><div class="flex items-center justify-between mb-4"><h3 class="text-lg font-semibold text-gray-900">Training Hyperparameters</h3> <!></div> <!> <div class="mb-6"><h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">üéØ Essential Parameters</h4> <div class="grid grid-cols-2 gap-4"><div><label for="learning_rate" class="block text-sm font-medium text-gray-700 mb-1">Learning Rate</label> <input type="number" id="learning_rate" step="0.00001" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1"><!></p></div> <div><label for="num_epochs" class="block text-sm font-medium text-gray-700 mb-1">Number of Epochs</label> <input type="number" id="num_epochs" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Number of complete passes through dataset</p></div> <div><label for="batch_size" class="block text-sm font-medium text-gray-700 mb-1">Batch Size per GPU</label> <input type="number" id="batch_size" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1"><!></p></div> <div><label for="gradient_accumulation" class="block text-sm font-medium text-gray-700 mb-1">Gradient Accumulation Steps</label> <input type="number" id="gradient_accumulation" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Effective batch size = batch_size √ó
                  gradient_accumulation_steps</p></div> <div><label for="max_steps" class="block text-sm font-medium text-gray-700 mb-1">Max Steps (Optional)</label> <input type="number" id="max_steps" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Override epochs with exact step count (-1 for full epochs)</p></div> <div><label for="optim" class="block text-sm font-medium text-gray-700 mb-1">Optimizer</label> <select id="optim" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>AdamW 8-bit (Recommended - Memory Efficient)</option><option>AdamW (PyTorch)</option><option>AdamW Fused (Faster)</option><option>Adafactor (Very Memory Efficient)</option><option>SGD</option></select> <p class="text-xs text-gray-500 mt-1">8-bit AdamW reduces memory usage significantly</p></div></div></div> <div class="mb-6"><h4 class="text-md font-medium text-gray-800 mb-3 flex items-center gap-2">üíæ Checkpoints & Logging</h4> <div class="grid grid-cols-3 gap-4"><div><label for="logging_steps" class="block text-sm font-medium text-gray-700 mb-1">Logging Steps</label> <input type="number" id="logging_steps" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Log metrics every N steps</p></div> <div><label for="save_steps" class="block text-sm font-medium text-gray-700 mb-1">Save Steps</label> <input type="number" id="save_steps" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Save checkpoint every N steps</p></div> <div><label for="save_total_limit" class="block text-sm font-medium text-gray-700 mb-1">Max Checkpoints</label> <input type="number" id="save_total_limit" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Keep only N most recent checkpoints</p></div></div></div> <!> <div class="mb-4"><button type="button" class="flex items-center gap-2 px-4 py-2 text-sm font-medium text-primary-700 bg-primary-50 border border-primary-200 rounded-lg hover:bg-primary-100 transition-colors"><span> </span> Advanced Hyperparameters</button></div> <!></div> <div><div class="flex items-center justify-between mb-4"><h3 class="text-lg font-semibold text-gray-900">LoRA Configuration</h3> <!></div> <div class="grid grid-cols-3 gap-4 mb-4"><div><label for="lora_r" class="block text-sm font-medium text-gray-700 mb-1">LoRA Rank (r)</label> <input type="number" id="lora_r" min="1" max="256" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Higher = more parameters (16 typical, 64+ for complex tasks)</p></div> <div><label for="lora_alpha" class="block text-sm font-medium text-gray-700 mb-1">LoRA Alpha</label> <input type="number" id="lora_alpha" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Scaling factor (typically equal to rank)</p></div> <div><label for="lora_dropout" class="block text-sm font-medium text-gray-700 mb-1">LoRA Dropout</label> <input type="number" id="lora_dropout" min="0" max="0.5" step="0.05" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/> <p class="text-xs text-gray-500 mt-1">Regularization (0.0-0.3, 0 = no dropout)</p></div></div> <div class="mb-4"><button type="button" class="flex items-center gap-2 px-4 py-2 text-sm font-medium text-primary-700 bg-primary-50 border border-primary-200 rounded-lg hover:bg-primary-100 transition-colors"><span> </span> Advanced LoRA Settings</button></div> <!></div> <div><h3 class="text-lg font-semibold text-gray-900 mb-4">Model Save Options</h3> <div><label for="save_method" class="block text-sm font-medium text-gray-700 mb-2">Save Method</label> <select id="save_method" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"><option>Save Merged Model (16-bit) - Recommended</option><option>Save Merged Model (4-bit) - Smaller Size</option><option>Save LoRA Adapters Only - Advanced</option></select> <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg"><p class="text-sm text-blue-800"><!></p></div></div></div> <!> <div class="flex gap-4 pt-4"><!> <!></div></form>`),ds=v('<div class="min-h-screen bg-gray-50"><div class="bg-white shadow"><div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"><div class="flex justify-between items-center py-6"><div class="flex items-center"><!> <h1 class="text-3xl font-bold text-gray-900 ml-4">New Training Job</h1></div></div></div></div> <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><!></div></div>');function fs(ie,N){cr(N,!0);let e=ga({name:"",model_type:"text",base_model:"unsloth/tinyllama-bnb-4bit",dataset_path:"./data/sample.jsonl",validation_dataset_path:"",output_dir:"",hyperparameters:{learning_rate:2e-4,num_epochs:3,batch_size:2,max_steps:-1,gradient_accumulation_steps:4,warmup_steps:10,logging_steps:10,save_steps:100,eval_steps:null,optim:"adamw_8bit",weight_decay:.01,lr_scheduler_type:"linear",max_grad_norm:1,adam_beta1:.9,adam_beta2:.999,adam_epsilon:1e-8,dataloader_num_workers:0,dataloader_pin_memory:!0,eval_strategy:"steps",load_best_model_at_end:!0,metric_for_best_model:"eval_loss",save_total_limit:3},lora_config:{r:16,lora_alpha:16,lora_dropout:0,lora_bias:"none",use_rslora:!1,use_gradient_checkpointing:"unsloth",random_state:42,target_modules:null,task_type:"CAUSAL_LM",loftq_config:null},from_hub:!1,validation_from_hub:!1,save_method:"merged_16bit",selective_loss:!1,selective_loss_level:"conservative",selective_loss_schema_keys:"",selective_loss_masking_start_step:0,selective_loss_verbose:!1,early_stopping_enabled:!1,early_stopping_patience:3,early_stopping_threshold:1e-4}),Z=se(!1),le=se(""),ee=se(ga([])),ae=se(ga([])),C=se(null),_e=se(!0),we=se("");ur(async()=>{try{R(_e,!0);const[O,E]=await Promise.all([ya.getRegistryModels("text-llm"),ya.getRegistryModels("vision-vlm")]);R(ee,O.models,!0),R(ae,E.models,!0),e.model_type==="text"&&l(ee).length>0?(R(C,l(ee)[0],!0),e.base_model=l(ee)[0].id):e.model_type==="vision"&&l(ae).length>0&&(R(C,l(ae)[0],!0),e.base_model=l(ae)[0].id)}catch(O){R(we,O instanceof Error?O.message:"Failed to load models from registry",!0),console.error("Failed to load registry models:",O),R(ee,[{id:"unsloth/tinyllama-bnb-4bit",name:"TinyLlama 1.1B (4-bit)",parameters:"1.1B"},{id:"unsloth/phi-2-bnb-4bit",name:"Phi-2 2.7B (4-bit)",parameters:"2.7B"},{id:"unsloth/mistral-7b-bnb-4bit",name:"Mistral 7B (4-bit)",parameters:"7B"},{id:"unsloth/llama-2-7b-bnb-4bit",name:"Llama 2 7B (4-bit)",parameters:"7B"},{id:"unsloth/llama-3-8b-bnb-4bit",name:"Llama 3 8B (4-bit)",parameters:"8B"}],!0),R(ae,[{id:"Qwen/Qwen2.5-VL-3B-Instruct",name:"Qwen2.5-VL 3B",parameters:"3B"},{id:"Qwen/Qwen2.5-VL-7B-Instruct",name:"Qwen2.5-VL 7B",parameters:"7B"},{id:"Qwen/Qwen2.5-VL-72B-Instruct",name:"Qwen2.5-VL 72B",parameters:"72B"},{id:"unsloth/Qwen2.5-VL-3B-Instruct-bnb-4bit",name:"Qwen2.5-VL 3B (4-bit)",parameters:"3B"},{id:"unsloth/Qwen2.5-VL-7B-Instruct-bnb-4bit",name:"Qwen2.5-VL 7B (4-bit)",parameters:"7B"}],!0)}finally{R(_e,!1)}}),ba(()=>{const O=e.model_type==="vision"?l(ae):l(ee);if(R(C,O.find(E=>E.id===e.base_model)||null,!0),l(C)?.training_defaults){const E=l(C).training_defaults;E.hyperparameters&&(e.hyperparameters={...e.hyperparameters,...E.hyperparameters}),E.lora_config&&(e.lora_config={...e.lora_config,...E.lora_config}),E.save_method&&(e.save_method=E.save_method)}}),ba(()=>{e.model_type==="vision"?(l(ae).length>0&&(e.base_model=l(ae)[0].id),e.dataset_path="./data/vision_dataset.jsonl"):(l(ee).length>0&&(e.base_model=l(ee)[0].id),e.dataset_path="./data/sample.jsonl")});let Se=se(!1),Le=se(!1);ba(()=>{e.name&&(e.output_dir=`./models/${e.name.toLowerCase().replace(/[^a-z0-9]/g,"-")}`)});async function xt(O){if(O.preventDefault(),!e.name||!e.base_model||!e.dataset_path){R(le,"Please fill in all required fields");return}R(Z,!0),R(le,"");try{let E=null;e.selective_loss_schema_keys&&e.selective_loss_schema_keys.trim()&&(E=e.selective_loss_schema_keys.split(",").map(ne=>ne.trim()).filter(ne=>ne.length>0));const te=await ya.createTrainingJob({...e,is_vision:e.model_type==="vision",selective_loss:e.selective_loss,selective_loss_level:e.selective_loss_level,selective_loss_schema_keys:E,selective_loss_masking_start_step:e.selective_loss_masking_start_step,selective_loss_verbose:e.selective_loss_verbose,early_stopping_enabled:e.early_stopping_enabled,early_stopping_patience:e.early_stopping_patience,early_stopping_threshold:e.early_stopping_threshold});te.success?hr(`/training/${te.data.job_id}`):R(le,"Failed to create training job")}catch(E){R(le,E instanceof Error?E.message:"Failed to create training job",!0)}finally{R(Z,!1)}}var Ae=ds();gr(O=>{yr.title="New Training Job - Model Garden"});var Me=t(Ae),xa=t(Me),ha=t(xa),ka=t(ha),ht=t(ka);fa(ht,{href:"/training",variant:"ghost",size:"sm",children:(O,E)=>{i();var te=Y("‚Üê Training Jobs");n(O,te)},$$slots:{default:!0}}),i(2),r(ka),r(ha),r(xa),r(Me);var wa=a(Me,2),kt=t(wa);kr(kt,{children:(O,E)=>{var te=ns(),ne=t(te);{var wt=s=>{var o=wr(),_=t(o),f=t(_,!0);r(_),r(o),J(()=>V(f,l(le))),n(s,o)};u(ne,s=>{l(le)&&s(wt)})}var Be=a(ne,2),Sa=a(t(Be),2),Ce=t(Sa),La=a(t(Ce),2),ce=t(La);ce.__click=[Sr,e];var Aa=t(ce),Ee=t(Aa),St=t(Ee);{var Lt=s=>{var o=Lr();n(s,o)};u(St,s=>{e.model_type==="text"&&s(Lt)})}r(Ee),i(2),r(Aa),i(2),r(ce);var be=a(ce,2);be.__click=[Ar,e];var Ma=t(be),Re=t(Ma),At=t(Re);{var Mt=s=>{var o=Mr();n(s,o)};u(At,s=>{e.model_type==="vision"&&s(Mt)})}r(Re),i(2),r(Ma),i(2),r(be),r(La),r(Ce);var Te=a(Ce,2),Ba=a(t(Te),2);m(Ba),r(Te);var je=a(Te,2),ue=a(t(je),2),Bt=t(ue);{var Ct=s=>{var o=Br();o.value=o.__value="",n(s,o)},Et=s=>{var o=ve(),_=K(o);{var f=d=>{var p=ve(),w=K(p);yt(w,17,()=>l(ee),ft,(h,x)=>{var g=Cr(),M=t(g);r(g);var b={};J(()=>{V(M,`${l(x).name??""} (${l(x).parameters??""})`),b!==(b=l(x).id)&&(g.value=(g.__value=l(x).id)??"")}),n(h,g)}),n(d,p)},k=d=>{var p=ve(),w=K(p);yt(w,17,()=>l(ae),ft,(h,x)=>{var g=Er(),M=t(g);r(g);var b={};J(()=>{V(M,`${l(x).name??""} (${l(x).parameters??""})`),b!==(b=l(x).id)&&(g.value=(g.__value=l(x).id)??"")}),n(h,g)}),n(d,p)};u(_,d=>{e.model_type==="text"?d(f):d(k,!1)},!0)}n(s,o)};u(Bt,s=>{l(_e)?s(Ct):s(Et,!1)})}r(ue);var Ca=a(ue,2);{var Rt=s=>{var o=Rr(),_=t(o);r(o),J(()=>V(_,`‚ö†Ô∏è Using fallback models: ${l(we)??""}`)),n(s,o)};u(Ca,s=>{l(we)&&s(Rt)})}var Ea=a(Ca,2);{var Tt=s=>{var o=Tr();n(s,o)};u(Ea,s=>{e.model_type==="vision"&&s(Tt)})}var jt=a(Ea,2);{var Nt=s=>{var o=zr(),_=t(o),f=t(_),k=t(f),d=t(k);r(k);var p=a(k,2),w=t(p,!0);r(p);var h=a(p,2);{var x=b=>{var L=Nr(),B=t(L),T=a(t(B));r(B);var z=a(B,2);{var U=P=>{var j=jr(),q=a(t(j));r(j),J(F=>V(q,` ${F??""}
                              tokens`),[()=>l(C).capabilities.context_window.toLocaleString()]),n(P,j)};u(z,P=>{l(C).capabilities?.context_window&&P(U)})}r(L),J(()=>V(T,` ${l(C).requirements.min_vram_gb??""}GB
                            minimum,
                            ${l(C).requirements.recommended_vram_gb??""}GB recommended`)),n(b,L)};u(h,b=>{l(C).requirements&&b(x)})}var g=a(h,2);{var M=b=>{var L=Or(),B=a(t(L));r(L),J(T=>V(B,` ${T??""}`),[()=>l(C).recommended_for.join(", ")]),n(b,L)};u(g,b=>{l(C).recommended_for&&l(C).recommended_for.length>0&&b(M)})}r(f),r(_),r(o),J(()=>{V(d,`üìä ${l(C).name??""}`),V(w,l(C).description)}),n(s,o)};u(jt,s=>{l(C)&&!l(_e)&&s(Nt)})}r(je);var Ne=a(je,2),ye=a(t(Ne),2);m(ye);var Oe=a(ye,2),Ra=t(Oe);m(Ra),i(2),r(Oe);var Ta=a(Oe,2),Ot=t(Ta);{var zt=s=>{var o=Pr();i(2),n(s,o)},Pt=s=>{var o=ve(),_=K(o);{var f=d=>{var p=Y(`Path to your JSONL dataset with image paths/base64 or local
                  file`);n(d,p)},k=d=>{var p=Y("Path to your JSONL dataset file");n(d,p)};u(_,d=>{e.model_type==="vision"?d(f):d(k,!1)},!0)}n(s,o)};u(Ot,s=>{e.from_hub?s(zt):s(Pt,!1)})}r(Ta),r(Ne);var ze=a(Ne,2),fe=a(t(ze),2);m(fe);var Pe=a(fe,2),ja=t(Pe);m(ja),i(2),r(Pe);var Na=a(Pe,2),qt=a(t(Na),3);{var Ft=s=>{var o=Y(`Use HuggingFace format: "username/repo" or
                  "username/repo::validation.jsonl"`);n(s,o)};u(qt,s=>{e.validation_from_hub&&s(Ft)})}r(Na),r(ze);var Oa=a(ze,2);{var Qt=s=>{var o=Qr(),_=a(t(o),2);{var f=d=>{var p=qr(),w=a(K(p),2),h=t(w);h.textContent='{"messages": [{"role": "user", "content": [{"type": "image", "image": "data:image/jpeg;base64,..."}, {"type": "text", "text": "What is shown?"}]}]}',r(w),i(2),n(d,p)},k=d=>{var p=Fr(),w=a(K(p),2),h=t(w);h.textContent='{"text": "What is in this image?", "image": "/path/to/image.jpg", "response": "A cat sitting on a table"}',r(w),i(2),n(d,p)};u(_,d=>{e.from_hub?d(f):d(k,!1)})}r(o),n(s,o)};u(Oa,s=>{e.model_type==="vision"&&s(Qt)})}var za=a(Oa,2),Pa=a(t(za),2);m(Pa),r(za),r(Sa),r(Be);var qe=a(Be,2),Fe=t(qe),Vt=a(t(Fe),2);{var Ut=s=>{var o=Vr();n(s,o)};u(Vt,s=>{l(C)?.training_defaults&&s(Ut)})}r(Fe);var qa=a(Fe,2);{var $t=s=>{var o=Ur();n(s,o)};u(qa,s=>{e.model_type==="vision"&&s($t)})}var Qe=a(qa,2),Fa=a(t(Qe),2),Ve=t(Fa),Ue=a(t(Ve),2);m(Ue);var Qa=a(Ue,2),Gt=t(Qa);{var Jt=s=>{var o=Y(`2e-5 recommended for
                    vision models`);n(s,o)},Dt=s=>{var o=Y("2e-4 typical for text models");n(s,o)};u(Gt,s=>{e.model_type==="vision"?s(Jt):s(Dt,!1)})}r(Qa),r(Ve);var $e=a(Ve,2),Va=a(t($e),2);m(Va),i(2),r($e);var Ge=a($e,2),Je=a(t(Ge),2);m(Je);var Ua=a(Je,2),Ht=t(Ua);{var It=s=>{var o=Y("Use 1 for vision models");n(s,o)},Wt=s=>{var o=Y(`2-4
                    typical for text models`);n(s,o)};u(Ht,s=>{e.model_type==="vision"?s(It):s(Wt,!1)})}r(Ua),r(Ge);var De=a(Ge,2),$a=a(t(De),2);m($a),i(2),r(De);var He=a(De,2),Ga=a(t(He),2);m(Ga),i(2),r(He);var Ja=a(He,2),Ie=a(t(Ja),2),We=t(Ie);We.value=We.__value="adamw_8bit";var Ke=a(We);Ke.value=Ke.__value="adamw_torch";var Ye=a(Ke);Ye.value=Ye.__value="adamw_torch_fused";var Xe=a(Ye);Xe.value=Xe.__value="adafactor";var Da=a(Xe);Da.value=Da.__value="sgd",r(Ie),i(2),r(Ja),r(Fa),r(Qe);var Ze=a(Qe,2),Ha=a(t(Ze),2),ea=t(Ha),Ia=a(t(ea),2);m(Ia),i(2),r(ea);var aa=a(ea,2),Wa=a(t(aa),2);m(Wa),i(2),r(aa);var Ka=a(aa,2),Ya=a(t(Ka),2);m(Ya),i(2),r(Ka),r(Ha),r(Ze);var Xa=a(Ze,2);{var Kt=s=>{var o=Gr(),_=K(o),f=a(t(_),2),k=t(f),d=a(t(k),2),p=t(d);p.value=p.__value="steps";var w=a(p);w.value=w.__value="epoch";var h=a(w);h.value=h.__value="no",r(d),r(k);var x=a(k,2),g=a(t(x),2);m(g),i(2),r(x);var M=a(x,2),b=a(t(M),2),L=t(b);L.value=L.__value="eval_loss";var B=a(L);B.value=B.__value="eval_accuracy";var T=a(B);T.value=T.__value="eval_f1",r(b),r(M);var z=a(M,2),U=t(z),P=t(U);m(P),i(2),r(U),i(2),r(z),r(f),r(_);var j=a(_,2),q=a(t(j),4),F=t(q),$=t(F),G=t($);m(G),i(2),r($),i(2),r(F);var W=a(F,2);{var D=A=>{var H=$r(),I=t(H),c=a(t(I),2);m(c),i(2),r(I);var he=a(I,2),de=a(t(he),2);m(de),i(2),r(he),i(2),r(H),y(c,()=>e.early_stopping_patience,pe=>e.early_stopping_patience=pe),y(de,()=>e.early_stopping_threshold,pe=>e.early_stopping_threshold=pe),n(A,H)};u(W,A=>{e.early_stopping_enabled&&A(D)})}r(q),r(j),X(d,()=>e.hyperparameters.eval_strategy,A=>e.hyperparameters.eval_strategy=A),y(g,()=>e.hyperparameters.eval_steps,A=>e.hyperparameters.eval_steps=A),X(b,()=>e.hyperparameters.metric_for_best_model,A=>e.hyperparameters.metric_for_best_model=A),oe(P,()=>e.hyperparameters.load_best_model_at_end,A=>e.hyperparameters.load_best_model_at_end=A),oe(G,()=>e.early_stopping_enabled,A=>e.early_stopping_enabled=A),n(s,o)};u(Xa,s=>{e.validation_dataset_path&&s(Kt)})}var ta=a(Xa,2),ra=t(ta);ra.__click=[Jr,Se];var Za=t(ra),Yt=t(Za,!0);r(Za),i(),r(ra),r(ta);var Xt=a(ta,2);{var Zt=s=>{var o=Dr(),_=a(t(o),2),f=t(_),k=a(t(f),2);m(k),i(2),r(f);var d=a(f,2),p=a(t(d),2),w=t(p);w.value=w.__value="linear";var h=a(w);h.value=h.__value="cosine";var x=a(h);x.value=x.__value="constant";var g=a(x);g.value=g.__value="constant_with_warmup";var M=a(g);M.value=M.__value="polynomial",r(p),i(2),r(d);var b=a(d,2),L=a(t(b),2);m(L),i(2),r(b);var B=a(b,2),T=a(t(B),2);m(T),i(2),r(B),r(_);var z=a(_,4),U=t(z),P=a(t(U),2);m(P),i(2),r(U);var j=a(U,2),q=a(t(j),2);m(q),i(2),r(j);var F=a(j,2),$=a(t(F),2);m($),i(2),r(F),r(z);var G=a(z,4),W=t(G),D=a(t(W),2);m(D),i(2),r(W);var A=a(W,2),H=t(A),I=t(H);m(I),i(2),r(H),i(2),r(A),r(G),r(o),y(k,()=>e.hyperparameters.weight_decay,c=>e.hyperparameters.weight_decay=c),X(p,()=>e.hyperparameters.lr_scheduler_type,c=>e.hyperparameters.lr_scheduler_type=c),y(L,()=>e.hyperparameters.warmup_steps,c=>e.hyperparameters.warmup_steps=c),y(T,()=>e.hyperparameters.max_grad_norm,c=>e.hyperparameters.max_grad_norm=c),y(P,()=>e.hyperparameters.adam_beta1,c=>e.hyperparameters.adam_beta1=c),y(q,()=>e.hyperparameters.adam_beta2,c=>e.hyperparameters.adam_beta2=c),y($,()=>e.hyperparameters.adam_epsilon,c=>e.hyperparameters.adam_epsilon=c),y(D,()=>e.hyperparameters.dataloader_num_workers,c=>e.hyperparameters.dataloader_num_workers=c),oe(I,()=>e.hyperparameters.dataloader_pin_memory,c=>e.hyperparameters.dataloader_pin_memory=c),n(s,o)};u(Xt,s=>{l(Se)&&s(Zt)})}r(qe);var sa=a(qe,2),oa=t(sa),er=a(t(oa),2);{var ar=s=>{var o=Hr();n(s,o)};u(er,s=>{l(C)?.training_defaults?.lora_config&&s(ar)})}r(oa);var ia=a(oa,2),la=t(ia),et=a(t(la),2);m(et),i(2),r(la);var na=a(la,2),at=a(t(na),2);m(at),i(2),r(na);var tt=a(na,2),rt=a(t(tt),2);m(rt),i(2),r(tt),r(ia);var da=a(ia,2),pa=t(da);pa.__click=[Ir,Le];var st=t(pa),tr=t(st,!0);r(st),i(),r(pa),r(da);var rr=a(da,2);{var sr=s=>{var o=Kr(),_=t(o),f=t(_),k=a(t(f),2),d=t(k);d.value=d.__value="none";var p=a(d);p.value=p.__value="all";var w=a(p);w.value=w.__value="lora_only",r(k),i(2),r(f);var h=a(f,2),x=a(t(h),2),g=t(x);g.value=g.__value="unsloth";var M=a(g);M.value=M.__value="true";var b=a(M);b.value=b.__value="false",r(x),i(2),r(h),r(_);var L=a(_,2),B=t(L),T=t(B),z=t(T);m(z),i(2),r(T),i(2),r(B);var U=a(B,2),P=a(t(U),2);m(P),i(2),r(U),r(L);var j=a(L,2),q=t(j),F=a(t(q),2),$=t(F);$.value=$.__value="CAUSAL_LM";var G=a($);G.value=G.__value="SEQ_2_SEQ_LM";var W=a(G);W.value=W.__value="TOKEN_CLS";var D=a(W);D.value=D.__value="SEQ_CLS";var A=a(D);A.value=A.__value="QUESTION_ANS",r(F),i(2),r(q);var H=a(q,2),I=a(t(H),2);m(I),I.__input=[Wr,e],i(2),r(H),r(j),i(2),r(o),J(c=>xr(I,c),[()=>e.lora_config.target_modules?.join(", ")||""]),X(k,()=>e.lora_config.lora_bias,c=>e.lora_config.lora_bias=c),X(x,()=>e.lora_config.use_gradient_checkpointing,c=>e.lora_config.use_gradient_checkpointing=c),oe(z,()=>e.lora_config.use_rslora,c=>e.lora_config.use_rslora=c),y(P,()=>e.lora_config.random_state,c=>e.lora_config.random_state=c),X(F,()=>e.lora_config.task_type,c=>e.lora_config.task_type=c),n(s,o)};u(rr,s=>{l(Le)&&s(sr)})}r(sa);var ma=a(sa,2),ot=a(t(ma),2),xe=a(t(ot),2),va=t(xe);va.value=va.__value="merged_16bit";var _a=a(va);_a.value=_a.__value="merged_4bit";var it=a(_a);it.value=it.__value="lora",r(xe);var lt=a(xe,2),nt=t(lt),or=t(nt);{var ir=s=>{var o=Yr();i(),n(s,o)},lr=s=>{var o=ve(),_=K(o);{var f=d=>{var p=Xr();i(),n(d,p)},k=d=>{var p=Zr();i(),n(d,p)};u(_,d=>{e.save_method==="merged_4bit"?d(f):d(k,!1)},!0)}n(s,o)};u(or,s=>{e.save_method==="merged_16bit"?s(ir):s(lr,!1)})}r(nt),r(lt),r(ot),r(ma);var dt=a(ma,2);{var nr=s=>{var o=ls(),_=a(t(o),4),f=t(_),k=t(f),d=t(k);m(d),i(2),r(k),i(2),r(f);var p=a(f,2);{var w=h=>{var x=is(),g=t(x),M=a(t(g),2),b=t(M);b.value=b.__value="conservative";var L=a(b);L.value=L.__value="moderate";var B=a(L);B.value=B.__value="aggressive",r(M);var T=a(M,2),z=t(T),U=t(z);{var P=S=>{var Q=es(),re=a(K(Q),2);re.textContent='{, }, [, ], :, ,, "',i(2),n(S,Q)},j=S=>{var Q=ve(),re=K(Q);{var ge=me=>{var ua=as();i(3),n(me,ua)},vr=me=>{var ua=ts();i(),n(me,ua)};u(re,me=>{e.selective_loss_level==="moderate"?me(ge):me(vr,!1)},!0)}n(S,Q)};u(U,S=>{e.selective_loss_level==="conservative"?S(P):S(j,!1)})}r(z),r(T),r(g);var q=a(g,2);{var F=S=>{var Q=rs(),re=a(t(Q),2);m(re),i(4),r(Q),y(re,()=>e.selective_loss_schema_keys,ge=>e.selective_loss_schema_keys=ge),n(S,Q)};u(q,S=>{e.selective_loss_level==="aggressive"&&S(F)})}var $=a(q,2),G=t($),W=t(G);r(G);var D=a(G,2);m(D);var A=a(D,4),H=t(A),I=a(t(H),2);{var c=S=>{var Q=ss();i(),n(S,Q)},he=S=>{var Q=os(),re=a(K(Q)),ge=t(re);r(re),J(()=>V(ge,`Currently: Model learns structure for ${e.selective_loss_masking_start_step??""}
                            steps, then masking begins`)),n(S,Q)};u(I,S=>{e.selective_loss_masking_start_step===0?S(c):S(he,!1)})}r(H),r(A),r($);var de=a($,2),pe=t(de),vt=t(pe);m(vt),i(2),r(pe),i(2),r(de);var _t=a(de,2),ca=a(t(_t),2),ct=t(ca),pr=a(t(ct));pr.textContent="{ } [ ] : ,",i(),r(ct),i(8),r(ca);var ut=a(ca,2),gt=a(t(ut),2);gt.textContent='{"name": "John", "age": 30}';var mr=a(gt,2);mr.textContent='{ } : , "',i(2),r(ut),r(_t),r(x),J(()=>V(W,`Masking Start Step: ${e.selective_loss_masking_start_step??""}`)),X(M,()=>e.selective_loss_level,S=>e.selective_loss_level=S),y(D,()=>e.selective_loss_masking_start_step,S=>e.selective_loss_masking_start_step=S),oe(vt,()=>e.selective_loss_verbose,S=>e.selective_loss_verbose=S),n(h,x)};u(p,h=>{e.selective_loss&&h(w)})}r(_),r(o),oe(d,()=>e.selective_loss,h=>e.selective_loss=h),n(s,o)};u(dt,s=>{e.model_type==="vision"&&s(nr)})}var pt=a(dt,2),mt=t(pt);fa(mt,{type:"submit",variant:"primary",get loading(){return l(Z)},get disabled(){return l(Z)},children:(s,o)=>{i();var _=Y();J(()=>V(_,l(Z)?"Creating...":"Start Training")),n(s,_)},$$slots:{default:!0}});var dr=a(mt,2);fa(dr,{href:"/training",variant:"secondary",children:(s,o)=>{i();var _=Y("Cancel");n(s,_)},$$slots:{default:!0}}),r(pt),r(te),J(()=>{ke(ce,1,`p-4 border-2 rounded-lg text-left transition-all ${e.model_type==="text"?"border-primary-500 bg-primary-50":"border-gray-300 hover:border-gray-400"}`),ke(Ee,1,`w-4 h-4 rounded-full border-2 ${e.model_type==="text"?"border-primary-500 bg-primary-500":"border-gray-400"}`),ke(be,1,`p-4 border-2 rounded-lg text-left transition-all ${e.model_type==="vision"?"border-primary-500 bg-primary-50":"border-gray-300 hover:border-gray-400"}`),ke(Re,1,`w-4 h-4 rounded-full border-2 ${e.model_type==="vision"?"border-primary-500 bg-primary-500":"border-gray-400"}`),ue.disabled=l(_e),bt(ye,"placeholder",e.from_hub?"username/dataset-name":e.model_type==="vision"?"./data/vision_dataset.jsonl":"./data/my-dataset.jsonl"),bt(fe,"placeholder",e.validation_from_hub?"username/val-dataset-name":e.model_type==="vision"?"./data/vision_val_dataset.jsonl":"./data/my-val-dataset.jsonl"),V(Yt,l(Se)?"‚ñº":"‚ñ∂"),V(tr,l(Le)?"‚ñº":"‚ñ∂")}),fr("submit",te,xt),y(Ba,()=>e.name,s=>e.name=s),X(ue,()=>e.base_model,s=>e.base_model=s),y(ye,()=>e.dataset_path,s=>e.dataset_path=s),oe(Ra,()=>e.from_hub,s=>e.from_hub=s),y(fe,()=>e.validation_dataset_path,s=>e.validation_dataset_path=s),oe(ja,()=>e.validation_from_hub,s=>e.validation_from_hub=s),y(Pa,()=>e.output_dir,s=>e.output_dir=s),y(Ue,()=>e.hyperparameters.learning_rate,s=>e.hyperparameters.learning_rate=s),y(Va,()=>e.hyperparameters.num_epochs,s=>e.hyperparameters.num_epochs=s),y(Je,()=>e.hyperparameters.batch_size,s=>e.hyperparameters.batch_size=s),y($a,()=>e.hyperparameters.gradient_accumulation_steps,s=>e.hyperparameters.gradient_accumulation_steps=s),y(Ga,()=>e.hyperparameters.max_steps,s=>e.hyperparameters.max_steps=s),X(Ie,()=>e.hyperparameters.optim,s=>e.hyperparameters.optim=s),y(Ia,()=>e.hyperparameters.logging_steps,s=>e.hyperparameters.logging_steps=s),y(Wa,()=>e.hyperparameters.save_steps,s=>e.hyperparameters.save_steps=s),y(Ya,()=>e.hyperparameters.save_total_limit,s=>e.hyperparameters.save_total_limit=s),y(et,()=>e.lora_config.r,s=>e.lora_config.r=s),y(at,()=>e.lora_config.lora_alpha,s=>e.lora_config.lora_alpha=s),y(rt,()=>e.lora_config.lora_dropout,s=>e.lora_config.lora_dropout=s),X(xe,()=>e.save_method,s=>e.save_method=s),n(O,te)},$$slots:{default:!0}}),r(wa),r(Ae),n(ie,Ae),br()}_r(["click","input"]);export{fs as component};
