import"../chunks/DsnmJJEf.js";import{p as ft,s as x,a as gt,o as xt,f as p,h as yt,b as i,c as bt,$ as ht,t as q,e as r,i as e,d as l,n as v,r as a,g as t,k as ue,j as Re,u as He,l as w,m as u,w as $t}from"../chunks/nG1nXqCg.js";import{i as M}from"../chunks/95pJECEZ.js";import{r as me,e as wt,s as Mt,i as zt}from"../chunks/0MiSZMzD.js";import{b as qe,a as Pt}from"../chunks/B_wnMFLY.js";import{b as Je}from"../chunks/D-D7rAU1.js";import{s as Lt,a as kt}from"../chunks/DbjUmEiN.js";import{g as Ft}from"../chunks/iuvDXYJF.js";import{p as qt}from"../chunks/6il5IUf-.js";import{B as pe,a as X,C as Be}from"../chunks/DYLRpWCU.js";import{B as Ue}from"../chunks/BhJxjrck.js";var Bt=p('<div class="text-center py-12"><div class="inline-block w-8 h-8 border-4 border-primary-600 border-t-transparent rounded-full animate-spin"></div> <p class="mt-2 text-gray-600">Loading...</p></div>'),Ut=p("<p><strong>Max Length:</strong> </p>"),Gt=p("<p><strong>Quantization:</strong> </p>"),St=p('<div class="flex items-start justify-between"><div class="flex-1"><div class="flex items-center gap-2 mb-2"><!> <h3 class="text-lg font-semibold text-gray-900">Model Currently Loaded</h3></div> <div class="space-y-1 text-sm text-gray-600"><p><strong>Path:</strong> </p> <p><strong>Tensor Parallel Size:</strong> </p> <p><strong>GPU Memory:</strong> </p> <!> <p><strong>Data Type:</strong> </p> <!></div></div> <!></div>'),At=p('<div class="flex items-center gap-2"><!> <p class="text-gray-700">Load a model below to start using inference.</p></div>'),Tt=p('<div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700"> </div>'),jt=p('<p class="text-sm text-gray-500">No models available. <a href="/training/new" class="text-primary-600 hover:text-primary-700">Train a model first</a>.</p>'),Ct=p('<div class="text-sm font-medium text-gray-700"> </div>'),Dt=p('<label><input type="radio" name="model" class="w-4 h-4 text-primary-600 focus:ring-primary-500"/> <div class="ml-3 flex-1"><div class="flex items-center justify-between"><div><div class="font-medium text-gray-900"> </div> <div class="text-sm text-gray-500"> </div> <div class="text-xs text-gray-400 mt-1"> </div></div> <div class="text-right"><!> <!></div></div></div></label>'),Qt=p('<div class="grid grid-cols-1 gap-3"></div>'),It=p('<div class="flex items-center gap-2"><div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div> <span>Loading Model...</span></div>'),Nt=p('<h2 class="text-xl font-semibold text-gray-900 mb-6"> </h2> <form class="space-y-6"><div><div class="block text-sm font-medium text-gray-700 mb-2">Select Model</div> <!></div> <details class="border border-gray-200 rounded-lg p-4"><summary class="font-medium text-gray-900 cursor-pointer">Advanced Settings</summary> <div class="mt-4 space-y-4"><div><label for="tensor-parallel" class="block text-sm font-medium text-gray-700 mb-1">Tensor Parallel Size</label> <input id="tensor-parallel" type="number" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"/> <p class="mt-1 text-xs text-gray-500">Number of GPUs to use for tensor parallelism (default: 1)</p></div> <div><label for="gpu-memory" class="block text-sm font-medium text-gray-700 mb-1">GPU Memory Utilization</label> <div class="flex items-center gap-3"><input id="gpu-memory" type="range" min="0.1" max="0.99" step="0.05" class="flex-1"/> <span class="text-sm font-medium text-gray-700 w-16 text-right"> </span></div> <p class="mt-1 text-xs text-gray-500">Fraction of GPU memory to use (0.1-0.99, default: 0.9)</p></div> <div><label for="max-length" class="block text-sm font-medium text-gray-700 mb-1">Max Model Length (tokens)</label> <input id="max-length" type="number" min="128" step="128" placeholder="Auto (from model config)" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"/> <p class="mt-1 text-xs text-gray-500">Maximum sequence length. Leave empty for auto-detection.</p></div> <div><label for="dtype" class="block text-sm font-medium text-gray-700 mb-1">Data Type</label> <select id="dtype" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"><option>Auto</option><option>Float16</option><option>BFloat16</option><option>Float32</option></select> <p class="mt-1 text-xs text-gray-500">Precision for model weights (default: auto)</p></div> <div><label for="quantization" class="block text-sm font-medium text-gray-700 mb-1">Quantization</label> <select id="quantization" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"><option>None (Auto-detect)</option><option>AWQ</option><option>GPTQ</option><option>SqueezeLLM</option><option>FP8</option><option>BitsAndBytes</option></select> <p class="mt-1 text-xs text-gray-500">Quantization method (default: auto-detect from model)</p></div></div></details> <div class="flex gap-3 pt-4"><!> <!></div></form>',1),Et=p('<!> <!> <!> <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg"><h3 class="font-medium text-blue-900 mb-2">💡 Tips</h3> <ul class="text-sm text-blue-800 space-y-1"><li>• Only one model can be loaded at a time for inference</li> <li>• Loading a new model will automatically unload the current one</li> <li>• Larger models require more GPU memory - adjust GPU Memory Utilization if needed</li> <li>• Auto-detection works well for most models - advanced settings are optional</li> <li>• After loading, visit the <a href="/inference" class="underline font-medium">Inference page</a> to generate text</li></ul></div>',1),Wt=p('<div class="min-h-screen bg-gray-50"><div class="bg-white shadow"><div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"><div class="flex justify-between items-center py-6"><div class="flex items-center"><!> <h1 class="text-3xl font-bold text-gray-900 ml-4">Load Model for Inference</h1></div></div></div></div> <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><!></div></div>');function aa(Ve,Xe){ft(Xe,!0);const Ye=()=>kt(qt,"$page",Ze),[Ze,et]=Lt(),tt=[];let ce=x(gt([])),_e=x(!0),y=x(""),z=x(!1),d=x(null),P=x(""),Y=x(1),W=x(.9),Z=x(null),ee=x("auto"),te=x(null);xt(async()=>{await fe();const o=Ye().url.searchParams.get("model");o&&!e(d)?.loaded&&l(P,decodeURIComponent(o),!0)});async function fe(){try{l(_e,!0);const o=await X.getModels();l(ce,o.items,!0),l(d,await X.getInferenceStatus(),!0),e(d).loaded&&e(d).model_info&&(l(P,e(d).model_info.model_path,!0),l(Y,e(d).model_info.tensor_parallel_size,!0),l(W,e(d).model_info.gpu_memory_utilization,!0),l(Z,e(d).model_info.max_model_len,!0),l(ee,e(d).model_info.dtype,!0),l(te,e(d).model_info.quantization,!0))}catch(o){l(y,o instanceof Error?o.message:"Failed to load data",!0)}finally{l(_e,!1)}}async function at(){if(!e(P)){l(y,"Please select a model");return}try{l(z,!0),l(y,""),e(d)?.loaded&&await X.unloadModel();const o=await X.loadModel({model_path:e(P),tensor_parallel_size:e(Y),gpu_memory_utilization:e(W),max_model_len:e(Z),dtype:e(ee),quantization:e(te)});o.success?(await fe(),Ft("/inference")):l(y,o.message||"Failed to load model",!0)}catch(o){l(y,o instanceof Error?o.message:"Failed to load model",!0)}finally{l(z,!1)}}async function rt(){try{l(z,!0),l(y,"");const o=await X.unloadModel();o.success?await fe():l(y,o.message||"Failed to unload model",!0)}catch(o){l(y,o instanceof Error?o.message:"Failed to unload model",!0)}finally{l(z,!1)}}function ot(o){if(o===0)return"0 Bytes";const L=1024,C=["Bytes","KB","MB","GB"],ae=Math.floor(Math.log(o)/Math.log(L));return parseFloat((o/Math.pow(L,ae)).toFixed(2))+" "+C[ae]}var ge=Wt();yt(o=>{ht.title="Load Model - Model Garden"});var xe=r(ge),Ge=r(xe),Se=r(Ge),Ae=r(Se),lt=r(Ae);pe(lt,{href:"/models",variant:"ghost",size:"sm",children:(o,L)=>{v();var C=q("← Models");i(o,C)},$$slots:{default:!0}}),v(2),a(Ae),a(Se),a(Ge),a(xe);var Te=t(xe,2),st=r(Te);{var it=o=>{var L=Bt();i(o,L)},dt=o=>{var L=Et(),C=ue(L);{var ae=_=>{Be(_,{class:"mb-6 bg-green-50 border-green-200",children:(k,D)=>{var g=St(),B=r(g),h=r(B),Q=r(h);Ue(Q,{variant:"success",children:(n,c)=>{v();var f=q("Loaded");i(n,f)},$$slots:{default:!0}}),v(2),a(h);var I=t(h,2),K=r(I),ye=t(r(K));a(K);var U=t(K,2),re=t(r(U));a(U);var G=t(U,2),oe=t(r(G));a(G);var N=t(G,2);{var le=n=>{var c=Ut(),f=t(r(c));a(c),w(()=>u(f,` ${e(d).model_info.max_model_len??""} tokens`)),i(n,c)};M(N,n=>{e(d).model_info.max_model_len&&n(le)})}var S=t(N,2),se=t(r(S));a(S);var be=t(S,2);{var O=n=>{var c=Gt(),f=t(r(c));a(c),w(()=>u(f,` ${e(d).model_info.quantization??""}`)),i(n,c)};M(be,n=>{e(d).model_info.quantization&&n(O)})}a(I),a(B);var ie=t(B,2);pe(ie,{variant:"danger",onclick:rt,get disabled(){return e(z)},children:(n,c)=>{v();var f=q();w(()=>u(f,e(z)?"Unloading...":"Unload Model")),i(n,f)},$$slots:{default:!0}}),a(g),w(n=>{u(ye,` ${e(d).model_info.model_path??""}`),u(re,` ${e(d).model_info.tensor_parallel_size??""}`),u(oe,` ${n??""}%`),u(se,` ${e(d).model_info.dtype??""}`)},[()=>(e(d).model_info.gpu_memory_utilization*100).toFixed(0)]),i(k,g)},$$slots:{default:!0}})},nt=_=>{Be(_,{class:"mb-6 bg-yellow-50 border-yellow-200",children:(k,D)=>{var g=At(),B=r(g);Ue(B,{variant:"warning",children:(h,Q)=>{v();var I=q("No Model Loaded");i(h,I)},$$slots:{default:!0}}),v(2),a(g),i(k,g)},$$slots:{default:!0}})};M(C,_=>{e(d)?.loaded?_(ae):_(nt,!1)})}var je=t(C,2);{var vt=_=>{var k=Tt(),D=r(k,!0);a(k),w(()=>u(D,e(y))),i(_,k)};M(je,_=>{e(y)&&_(vt)})}var ut=t(je,2);Be(ut,{children:(_,k)=>{var D=Nt(),g=ue(D),B=r(g,!0);a(g);var h=t(g,2),Q=r(h),I=t(r(Q),2);{var K=s=>{var F=jt();i(s,F)},ye=s=>{var F=Qt();wt(F,21,()=>e(ce),zt,(de,m)=>{var E=Dt(),A=r(E);me(A);var ne,$=t(A,2),T=r($),R=r(T),H=r(R),Fe=r(H,!0);a(H);var b=t(H,2),J=r(b,!0);a(b);var Ee=t(b,2),pt=r(Ee,!0);a(Ee),a(R);var We=t(R,2),Ke=r(We);{var ct=j=>{var V=Ct(),Oe=r(V,!0);a(V),w(ve=>u(Oe,ve),[()=>ot(e(m).size_bytes)]),i(j,V)};M(Ke,j=>{e(m).size_bytes&&j(ct)})}var _t=t(Ke,2);{let j=He(()=>e(m).status==="available"?"success":"warning");Ue(_t,{get variant(){return e(j)},class:"mt-1",children:(V,Oe)=>{v();var ve=q();w(()=>u(ve,e(m).status)),i(V,ve)},$$slots:{default:!0}})}a(We),a(T),a($),a(E),w(()=>{Mt(E,1,`relative flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors ${e(P)===e(m).path?"border-primary-600 bg-primary-50":"border-gray-300"}`),ne!==(ne=e(m).path)&&(A.value=(A.__value=e(m).path)??""),u(Fe,e(m).name),u(J,e(m).base_model),u(pt,e(m).path)}),Pt(tt,[],A,()=>(e(m).path,e(P)),j=>l(P,j)),i(de,E)}),a(F),i(s,F)};M(I,s=>{e(ce).length===0?s(K):s(ye,!1)})}a(Q);var U=t(Q,2),re=t(r(U),2),G=r(re),oe=t(r(G),2);me(oe),v(2),a(G);var N=t(G,2),le=t(r(N),2),S=r(le);me(S);var se=t(S,2),be=r(se);a(se),a(le),v(2),a(N);var O=t(N,2),ie=t(r(O),2);me(ie),v(2),a(O);var n=t(O,2),c=t(r(n),2),f=r(c);f.value=f.__value="auto";var he=t(f);he.value=he.__value="float16";var $e=t(he);$e.value=$e.__value="bfloat16";var Ce=t($e);Ce.value=Ce.__value="float32",a(c),v(2),a(n);var De=t(n,2),we=t(r(De),2),Me=r(we);Me.value=(Me.__value=null)??"";var ze=t(Me);ze.value=ze.__value="awq";var Pe=t(ze);Pe.value=Pe.__value="gptq";var Le=t(Pe);Le.value=Le.__value="squeezellm";var ke=t(Le);ke.value=ke.__value="fp8";var Qe=t(ke);Qe.value=Qe.__value="bitsandbytes",a(we),v(2),a(De),a(re),a(U);var Ie=t(U,2),Ne=r(Ie);{let s=He(()=>e(z)||!e(P));pe(Ne,{type:"submit",variant:"primary",fullWidth:!0,get disabled(){return e(s)},children:(F,de)=>{var m=Re(),E=ue(m);{var A=$=>{var T=It();i($,T)},ne=$=>{var T=Re(),R=ue(T);{var H=b=>{var J=q("Switch to This Model");i(b,J)},Fe=b=>{var J=q("Load Model");i(b,J)};M(R,b=>{e(d)?.loaded?b(H):b(Fe,!1)},!0)}i($,T)};M(E,$=>{e(z)?$(A):$(ne,!1)})}i(F,m)},$$slots:{default:!0}})}var mt=t(Ne,2);pe(mt,{href:"/models",variant:"secondary",children:(s,F)=>{v();var de=q("Cancel");i(s,de)},$$slots:{default:!0}}),a(Ie),a(h),w(s=>{u(B,e(d)?.loaded?"Load Different Model":"Load Model"),u(be,`${s??""}%`)},[()=>(e(W)*100).toFixed(0)]),$t("submit",h,s=>{s.preventDefault(),at()}),qe(oe,()=>e(Y),s=>l(Y,s)),qe(S,()=>e(W),s=>l(W,s)),qe(ie,()=>e(Z),s=>l(Z,s)),Je(c,()=>e(ee),s=>l(ee,s)),Je(we,()=>e(te),s=>l(te,s)),i(_,D)},$$slots:{default:!0}}),v(2),i(o,L)};M(st,o=>{e(_e)?o(it):o(dt,!1)})}a(Te),a(ge),i(Ve,ge),bt(),et()}export{aa as component};
